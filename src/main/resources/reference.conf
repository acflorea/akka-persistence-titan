# Give enough time for embedded Cassandra to warm up
akka.test.single-expect-default = "30s"

akka.persistence.journal.plugin = "titan-journal"
titan-journal {

  # FQCN of the titan journal plugin
  class = "akka.persistence.titan.journal.TitanJournal"

  # Give enough time for embedded Cassandra to warm up
  circuit-breaker.call-timeout = "30s"
  circuit-breaker.reset-timeout = "30s"

  graph {
    # Titan
    # ~~~~~
    storage.backend = "embeddedcassandra"
    storage.conf-file = "cassandra/cassandra.yaml"
    storage.cassandra.keyspace = "akkajournal"

    # ElasticSearch
    # ~~~~~
    index.search.backend = "elasticsearch"
    index.search.elasticsearch.client-only = false
    index.search.elasticsearch.local-mode = true
    index.search.directory = "../db/es"

  }

}

akka.persistence.snapshot-store.plugin = "titan-snapshot-store"
titan-snapshot-store {

  # FQCN of the cassandra journal plugin
  class = "akka.persistence.titan.snapshot.TitanSnapshotStore"

  # Give enough time for embedded Cassandra to warm up
  circuit-breaker.call-timeout = "30s"
  circuit-breaker.reset-timeout = "30s"

  # Message details section
  message-details {
    # Weather a human readable for of the message is also persisted
    persist = true
    # The snapshot details are persisted as a vertex linked to the serialized snapshot vertex.
    # This property gives the name of the edge linking the two vertices.
    relation-name = "has_details"
  }

  graph {
    # Titan
    # ~~~~~
    storage.backend = "embeddedcassandra"
    storage.conf-file = "cassandra/cassandra.yaml"
    storage.cassandra.keyspace = "akkasnapshot"

    # ElasticSearch
    # ~~~~~
    index.search.backend = "elasticsearch"
    index.search.elasticsearch.client-only = false
    index.search.elasticsearch.local-mode = true
    index.search.directory = "../db/es"

  }
}